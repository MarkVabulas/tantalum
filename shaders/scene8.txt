#include "trace-frag"

#include "bsdf"
#include "intersect"
#include "csg-intersect"

void intersect(Ray ray, inout Intersection isect) {
    bboxIntersect(ray, vec2(0.0), vec2(2.0, 1.0), 0.0, isect);

    sphereIntersect(ray, vec2(-1.0, 0.5), 0.33, 2.0, isect);
    prismIntersect(ray, vec2(1.0, 0.5), 0.4, 2.0, isect);
    prismIntersect(ray, vec2(-1.0, -0.5), 0.33, 1.0, isect);
    sphereIntersect(ray, vec2(1.0, -0.5), 0.25, 1.0, isect);

    sphereIntersect(ray, vec2(0.0, 1.0), 0.33, 3.0, isect);
    prismIntersect(ray, vec2(0.0, -1.5), 1.0, 4.0, isect);
    
    meniscusLensIntersect   (ray, vec2(-0.75, 0.0), 0.1875, 0.075,   0.225, 0.375, 1.0, isect);
    planoConvexLensIntersect(ray, vec2(-0.45, 0.0), 0.1875, 0.0375,  0.375,        1.0, isect);
    biconvexLensIntersect   (ray, vec2(-0.15, 0.0), 0.1875, 0.075,   0.375, 0.375, 2.0, isect);
    biconcaveLensIntersect  (ray, vec2( 0.15, 0.0), 0.1875, 0.01875, 0.375, 0.375, 2.0, isect);
    meniscusLensIntersect   (ray, vec2( 0.45, 0.0), 0.1875, 0.075,   0.225, 0.375, 1.0, isect);
    planoConvexLensIntersect(ray, vec2( 0.75, 0.0), 0.1875, 0.0375,  0.375,        1.0, isect);
}

vec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput) {
    if (isect.mat == 1.0) {
        float ior = sellmeierIor(vec3(1.6215, 0.2563, 1.6445), vec3(0.0122, 0.0596, 147.4688), lambda)/1.6; // SF10
        return sampleDielectric(state, wiLocal, ior);
    } else if (isect.mat == 2.0) {
        float ior = sellmeierIor(vec3(1.6215, 0.2563, 1.6445), vec3(0.0122, 0.0596, 17.4688), lambda)/1.8;
        return sampleRoughDielectric(state, wiLocal, 0.1, ior);
    } else if (isect.mat == 3.0) {
        return sampleMirror(wiLocal);
    } else if (isect.mat == 4.0) {
        return sampleRoughMirror(state, wiLocal, throughput, 0.05);
    } else {
        throughput *= vec3(0.25);
        return sampleDiffuse(state, wiLocal);
    }
}
